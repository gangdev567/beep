# ??? ?? ?? ??
spring.config.import=classpath:application-secret.properties

server.address= 0.0.0.0
#tomcat server port 설정
server.port=8081

# application.properties
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
file.upload-dir=/uploads/
# MariaDB 데이터베이스 설정
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/beep?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
#spring.datasource.username=scott
#spring.datasource.password=tiger

#spring.jpa.defer-datasource-initialization=true

spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver



spring.datasource.url=${RDS_URL}
spring.datasource.username=${RDS_USERNAME}
spring.datasource.password=${RDS_PASSWORD}

#spring.datasource.url=jdbc:oracle:thin:@192.168.20.25:1521:xe
#spring.datasource.username=scott
#spring.datasource.password=tiger


# AWS Cloud Configuration
cloud.aws.credentials.accessKey=${AWS_ACCESS_KEY}
cloud.aws.credentials.secretKey=${AWS_SECRET_KEY}
cloud.aws.region.static=${AWS_REGION}
cloud.aws.stack.auto=false
cloud.aws.s3.bucket=${AWS_S3_BUCKET}
#spring.jpa.defer-datasource-initialization=true
#hikari 계속 오류나서 커넥션 늘렸습니다. 
spring.datasource.hikari.maximum-pool-size=50
spring.datasource.hikari.connection-timeout=10000

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.debug=true

spring.jpa.hibernate.ddl-auto=none


spring.jpa.properties.hibernate.format_sql=true


# debug
logging.level.org.hibernate.SQL=info
# trace
logging.level.org.hibernate.orm.jdbc.bind=info

spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=false
spring.devtools.remote.restart.enabled=true
spring.freemarker.cache=false
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.web.resources.static-locations=classpath:/static/

logging.level.root=INFO
logging.level.org.springframework.web=debug

# twitch api
spring.security.oauth2.client.registration.twitch.client-id=${TWITCH_CLIENT_ID}
spring.security.oauth2.client.registration.twitch.client-secret=${TWITCH_CLIENT_SECRET}
spring.security.oauth2.client.registration.twitch.client-authentication-method=POST
spring.security.oauth2.client.registration.twitch.scope=user:read:email
spring.security.oauth2.client.registration.twitch.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.twitch.provider=twitch
spring.security.oauth2.client.registration.twitch.client-name=Twitch
spring.security.oauth2.client.registration.twitch.redirect-uri=https://api.igdb.com/v4

spring.security.oauth2.client.provider.twitch.authorization-uri=https://id.twitch.tv/oauth2/authorize?response_type=code
spring.security.oauth2.client.provider.twitch.token-uri=https://id.twitch.tv/oauth2/token
spring.security.oauth2.client.provider.twitch.user-info-uri=https://id.twitch.tv/oauth2/userinfo
spring.security.oauth2.client.provider.twitch.user-info-authentication-method=POST
spring.security.oauth2.client.provider.twitch.jwk-set-uri=https://id.twitch.tv/oauth2/keys
spring.security.oauth2.client.provider.twitch.user-name-attribute=sub

# google 
# 각각 구글 클라이언트 ID , Secret KEY 받아서 테스트해보세요
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
# spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google
# spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email
spring.profiles.include=oauth
